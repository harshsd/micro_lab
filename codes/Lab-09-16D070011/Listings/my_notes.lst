C51 COMPILER V9.50a   MY_NOTES                                                             10/18/2018 10:15:54 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE MY_NOTES
OBJECT MODULE PLACED IN .\Objects\my_notes.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ADSR\my_notes.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\my_notes.lst) TA
                    -BS(2) OBJECT(.\Objects\my_notes.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include <stdio.h>
   3          #include <math.h>
   4          
   5          void delay(int delay_in_ms);
   6          void SPI_init();
   7          void SPI_send(char onebyte);
   8          void SPI_send2(char hbyte, char lbyte);
   9          void Timer_Init();
  10          
  11          char test [] = {0xEF,0xBE,  0xF1,0x8C,  0xF2,0xFE,  0xF3,0xCE,
  12                          0xF5,0x29,  0xF6,0x3F,  0xF7,0x50,  0xF7,0xDF,
  13                          0xF7,0xDF,  0xF7,0x50,  0xF6,0x3F,  0xF5,0x29,
  14                          0xF3,0xCE,  0xF2,0xFE,  0xF1,0x8C,  0xEF,0xBE 
  15                          
  16          };
  17          
  18          
  19          unsigned char low,high,serial_data;
  20          
  21          unsigned char timer_low,timer_high = 0;
  22          
  23          sbit csb = P3^4;
  24          sbit fs = P3^5;
  25          
  26          bit k = 0;
  27          bit rising = 1;
  28          bit transmit_completed = 0;
  29          
  30          unsigned int t,curr_note=0;
  31          unsigned int c,c_m=0;
  32          
  33          void main(void)
  34          {
  35   1        Timer_Init();
  36   1        SPI_init();
  37   1        while(1)
  38   1        {
  39   2          SPI_send2(high,low);
  40   2          delay(10);
  41   2        }
  42   1      }
  43          
  44          void delay(int delay_in_ms)
  45          {
  46   1        int d=0;
  47   1        while(delay_in_ms>0)
  48   1        {
  49   2          for(d=0;d<382;d++);
  50   2          delay_in_ms--;
  51   2        }
  52   1        return; 
  53   1      }
  54          
C51 COMPILER V9.50a   MY_NOTES                                                             10/18/2018 10:15:54 PAGE 2   

  55          void SPI_init()
  56          {
  57   1        csb = 1;
  58   1        fs = 1;                     // DISABLE ADC SLAVE SELECT-CS 
  59   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
  60   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
  61   1        SPCON |= 0x10;                  // Master mode 
  62   1        SPCON |= 0x08;                // CPOL=1; transmit mode example|| SCK is 0 at idle state
  63   1        SPCON &= ~0x04;                 // CPHA=0; transmit mode example 
  64   1        IEN1 |= 0x04;                   // enable spi interrupt 
  65   1        EA=1;                           // enable interrupts 
  66   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
  67   1      //  IPH0 |=0x10;
  68   1      //  IPL0 |=0x10;
  69   1      }
  70          
  71          void SPI_send(char onebyte)   
  72          {
  73   1        transmit_completed = 0;
  74   1        SPDAT = onebyte;
  75   1        while(!transmit_completed);
  76   1        return;
  77   1      }
  78          
  79          void SPI_send2(char hbyte,char lbyte)
  80          {
  81   1        fs = 1;
  82   1        csb = 0;
  83   1        fs = 0;
  84   1        SPI_send(hbyte);
  85   1        SPI_send(lbyte);
  86   1        fs = 1;
  87   1        csb = 1;
  88   1        return;
  89   1      }
  90          
  91          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  92          {
  93   1        switch  ( SPSTA )         /* read and clear spi status register */
  94   1        {
  95   2          case 0x80:  
  96   2            serial_data=SPDAT;   /* read receive data */    //needs to be read to clear the trigger
  97   2            transmit_completed=1;/* set software flag */
  98   2          break;
  99   2      
 100   2          case 0x10:
 101   2            
 102   2          break;
 103   2        
 104   2          case 0x40:
 105   2          break;
 106   2        }
 107   1      }
 108          
 109          void Timer_Init()
 110          {
 111   1        // Set Timer0 to work in up counting 16 bit mode. Counts upto 
 112   1        // 65536 depending upon the calues of TH0 and TL0
 113   1        // The timer counts 65536 processor cycles. A processor cycle is 
 114   1        // 12 clocks. FOr 24 MHz, it takes 65536/2 uS to overflow
 115   1        curr_note = 0;
 116   1        timer_low = test[curr_note];
C51 COMPILER V9.50a   MY_NOTES                                                             10/18/2018 10:15:54 PAGE 3   

 117   1        timer_high = test[curr_note+1];
 118   1        TH0 = timer_high;//Initialize TH0
 119   1        TL0 = timer_low;//Initialize TL0
 120   1        TH1 = 0xef;//Initialize TH1
 121   1        TL1 = 0xb9;//Initialize TL1
 122   1        TMOD = 0x11;//Configure TMOD 
 123   1        ET0 = 1;//Set ET0
 124   1        TR0 = 1;//Set TR0
 125   1        ET1 = 1;
 126   1        TR1 = 1;
 127   1      }
 128          
 129          
 130          void Timer1_ISR(void) interrupt 3
 131          {
 132   1        TR1 = 0;
 133   1        TH1 = timer_high;
 134   1        TL1 = timer_low;
 135   1        k = ~k;
 136   1        c_m = c*k;
 137   1        high = c_m/256;
 138   1        low = c_m%256;
 139   1        TR1 = 1;
 140   1      }
 141          
 142          void Timer0_ISR(void) interrupt 1
 143          {
 144   1        TR0 = 0;
 145   1        TH0 = 0xD0;
 146   1        TL0 = 0x71;
 147   1        if(rising==1)
 148   1        {
 149   2          if(t<102)
 150   2            {t = t+1;
 151   3            c=c+30;}
 152   2          else if(t<204)
 153   2          {
 154   3            t = t+1;
 155   3          }
 156   2          else
 157   2            {rising=0;t=306;}
 158   2        }
 159   1        else
 160   1        {
 161   2          if(t>0)
 162   2          {
 163   3          t=t-1;
 164   3            c = c-10;
 165   3          }
 166   2          else
 167   2          {
 168   3            curr_note = curr_note + 2;
 169   3            if(curr_note>31)
 170   3            {
 171   4              curr_note = 0;
 172   4            }
 173   3            timer_high = test[curr_note];
 174   3            timer_low = test[curr_note+1];
 175   3            rising = 1;
 176   3          }
 177   2        }
 178   1        TR0 = 1;
C51 COMPILER V9.50a   MY_NOTES                                                             10/18/2018 10:15:54 PAGE 4   

 179   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    426    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     45    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
